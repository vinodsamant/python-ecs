# Generated by Django 2.2.4 on 2020-05-26 14:00

import contests.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contest_categories', '0001_migrations'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContestsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contest_name', models.CharField(blank=True, max_length=150, null=True)),
                ('contest_internal_name', models.CharField(blank=True, max_length=150, null=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('start_date', models.DateField(auto_now=True)),
                ('end_date', models.DateField(auto_now=True)),
                ('brand_name', models.CharField(blank=True, max_length=150, null=True)),
                ('prize_money', models.IntegerField(blank=True, null=True)),
                ('logo', models.ImageField(null=True, upload_to=contests.models.logo_directory)),
                ('gift_card', models.FileField(blank=True, null=True, upload_to=contests.models.gift_card_directory, verbose_name='Upload gift card')),
                ('qualification_eligibility', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('terms_and_conditions', models.TextField(blank=True, null=True)),
                ('ad_video', models.FileField(blank=True, null=True, upload_to=contests.models.ad_video_directory, verbose_name='Upload ad video')),
                ('cpm_daily_max_spend', models.IntegerField(blank=True, null=True)),
                ('cpc_ad_description', models.TextField(blank=True, null=True)),
                ('ad_url', models.TextField(blank=True, null=True)),
                ('cpc_daily_max_spend', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'contests',
            },
        ),
        migrations.CreateModel(
            name='ContestPrize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prize_range_type', models.IntegerField(choices=[(1, 'single'), (2, 'range')])),
                ('rank', models.IntegerField(blank=True, default=0, null=True)),
                ('from_range', models.IntegerField(blank=True, default=0, null=True)),
                ('to_range', models.IntegerField(blank=True, default=0, null=True)),
                ('prize_type', models.IntegerField(choices=[(1, 'membership'), (2, 'product_service')])),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestsModel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContestCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contest_categories.ContestSubCategory')),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contests.ContestsModel')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
